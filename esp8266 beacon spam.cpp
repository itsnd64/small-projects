#include "ESP8266WiFi.h"

int ch = 1;

uint8_t packet[] = {
  0x80, 0x00, 0x00, 0x00, // Frame Control
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Destination
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Source
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // BSSID
  0x00, 0x00, // Sequence Control
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp
  0x64, 0x00, // Beacon interval
  0x31, 0x14, // Capability info

  // Tags
  0x00, 0x07, // SSID tag
  'H', 'a', 'o', ' ', 'g', 'a', 'y', // SSID

  0x01, 0x08, // Supported Rates
  0x82, 0x84, 0x8B, 0x96, 0x0C, 0x12, 0x18, 0x24, // 1, 2, 5.5, 11, 6, 9, 12, 18 Mbps
  
  0x32, 0x04, // Extended Supported Rates 
  0x30, 0x48, 0x60, 0x6C, // 24, 36, 48, 54 Mbps

  0x03, 0x01, // DS Parameters
  0x01, // Channel

  0x30, 0x14, // RSN
  0x01, 0x00, // RSN version 1
  0x00, 0x0F, 0xAC, 0x04, // Group Cipher Suite
  0x01, 0x00, // Pairwise cipher count = 1
  0x00, 0x0F, 0xAC, 0x04, // Pairwise Cipher Suite List: CCMP
  0x01, 0x00, // Auth Key Management Suite Count = 1
  0x00, 0x0F, 0xAC, 0x02, // AKM Suite List: PSK
  0x00, 0x00, // RSN Capabilities

  0x2D, 0x1A, // HT Capabilities
  0xEF, 0x19, // HT Capabilities Info
  0x17, 0xFF, // A-MPDU Parameters
  0xFF, 0x00, 0x00, 0x00, // Supported MCS Set (only first byte usually needed)
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00,

  0x3D, 0x16, // HT Operation Tag ID + Length = 22 bytes
  0x01, // Primary Channel = 1
  0x00, // HT Info Subset 1
  0x1C, 0x00, // HT Info Subset 2 & 3
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Basic MCS Set
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00,
  
  0x7F, 0x08, // Extended Capabilities
  0x00, 0x00, 0x00, 0x00,
  0x40, 0x00, 0x00, 0x00,
};

void setup() {
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
}

void loop() {
  ch = (ch % 13) + 1;
  for (int i = 10; i <= 21; i++) packet[i] = random(256);
  packet[63] = ch;
  packet[116] = ch;

  wifi_set_channel(ch);
  wifi_send_pkt_freedom(packet, sizeof(packet), 0);
  delay(1);
}
